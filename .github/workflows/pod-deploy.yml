name: PRODUCTION

# 1
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true
#2
env:
  IMAGE_NAME: 'fresh-food-fe'
  REGISTRY: 'registry.minhxinchao.com'
  CONTAINER_PORT: 80

#3
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: latest
          

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_NAME,GITHUB_SHA
          script: |
            # Login to registry
            docker login ${{ env.REGISTRY }} -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
            # Pull Image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            # Stop running container
            docker stop ${{ secrets.CONTAINER_NAME }}
            # Remove old container
            docker rm ${{ secrets.CONTAINER_NAME }}
            # Run container
            docker run \
            -p ${{ secrets.PORT }}:${{ env.CONTAINER_PORT }} \
            --name=${{ secrets.CONTAINER_NAME }} \
            --restart=always \
            -v /my/data/dir:/var/lib/${{ secrets.CONTAINER_NAME }} \
            -e VITE_APP_BASE_URL=${{ secrets.VITE_APP_BASE_URL }} \
            -e VITE_APP_CONTRACT_ADDRESS=${{ secrets.VITE_APP_CONTRACT_ADDRESS }} \
            -d ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
